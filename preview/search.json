[{"type":"project","title":"MUS","description":"Portfolio website of M. Umar Shahbaz","image":"icon.png","prefrence":1,"icons":["Bootstrap","Jekyll","Docker","Actions"],"category":"wip","url":"/preview/projects/MUS.html","content":"Technical Details Overview This website is powered by Jekyll, a static site generator that transforms structured data and content into a fast, lightweight, and secure static website. A key feature of this site is the automatic generation of sections and pages from YAML-based schemas, ensuring consistency, scalability, and easy updates without manual HTML editing. Build &amp; Deployment flowchart TD A[Data] B[Schemas] C[Jekyll] D[Generated Site] E[Asset Optimization] F[PurgeCSS] G[Terser] H[Image Optimization] I[Collect All] J[Publish to GitHub Pages] A --&gt; C B --&gt; C C --&gt; D D --&gt; E E --&gt; F --&gt; I E --&gt; G --&gt; I E --&gt; H --&gt; I I --&gt; J Benefits of This Approach Automation: Sections and pages update instantly when schemas change. Performance: Static HTML loads fast without server-side processing. Security: No backend code execution. Consistency: Centralized schemas avoid repetition. Scalability: Easy to add new projects, skills, or links without touching HTML. Libraries Bootstrap – Responsive grid system and UI components AOS (Animate On Scroll) – Scroll-triggered animations Font Awesome (FA) – Icon set for UI and branding Devicons – Icons for programming languages and tools Fuse.js – Client-side fuzzy search Mermaid - Flowcharts Auto-Generated Content A major strength of this site is its reliance on YAML-based schemas to drive content generation. These schemas are processed by Liquid templates to produce HTML automatically. 1. Social Links (_data/socials.yml) Schema: &lt;icon_key&gt;: &lt;url&gt; Example: fab.github: https://github.com/USERNAME fab.linkedin: https://www.linkedin.com/in/USERNAME fas.rss: https://example.com/feed.xml Usage: Populates footer social icons dynamically, mapping each Font Awesome icon key to its corresponding URL. 2. Skills (_data/skills.yml) Schema: - title: &lt;skill_group_title&gt; subtitle: &lt;short_description&gt; icons: - &lt;icon_key&gt; - &lt;icon_key&gt; Example: - title: MERN Stack subtitle: Web Development (WIP) icons: - MongoDB - Express - React - NodeJS Usage: Generates skill cards displayed at the homepage with matching icons and subtitles. 3. Projects (_projects/*.md) Schema: --- title: &lt;project_name&gt; description: &lt;short_description&gt; image: &lt;image_url_or_path&gt; prefrence: &lt;number_for_sorting&gt; repository: &lt;github_owner/repository&gt; icons: - &lt;icon_key&gt; - &lt;icon_key&gt; permalink: /projects/&lt;slug&gt; layout: project category: prominent | wip | planned container_classes: &lt;css_classes&gt; --- &lt;page_content&gt; Usage: Used to generate pages for Project Descriptions (including this one) 4. Icons (_data/icons.yml) Schema: &lt;icon_key&gt;: class: &lt;css_class&gt; color: &lt;hex_color&gt; Example: MongoDB: class: devicon-mongodb-plain color: '#4DB33D' Usage: A set of reusable icons."},{"type":"post","title":"Welcome to Jekyll!","description":"You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.","image":"","category":"post","url":"/preview/jekyll/update/2025/06/14/welcome-to-jekyll.html","date":"2025-06-14","content":"You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated. Jekyll requires blog post files to be named according to the following format: YEAR-MONTH-DAY-title.MARKUP Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and MARKUP is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works. Jekyll also offers powerful support for code snippets: def print_hi(name) puts \"Hi, #{name}\" end print_hi('Tom') #=&gt; prints 'Hi, Tom' to STDOUT. Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk."}]